/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.spark.tracing;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-23")
public class StageList implements org.apache.thrift.TBase<StageList, StageList._Fields>, java.io.Serializable, Cloneable, Comparable<StageList> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StageList");

  private static final org.apache.thrift.protocol.TField STAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("stages", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SUBMIT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("submitTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StageListStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StageListTupleSchemeFactory());
  }

  public List<StageInfo> stages; // required
  public long submitTime; // required
  public int jobId; // required
  public String appId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STAGES((short)1, "stages"),
    SUBMIT_TIME((short)2, "submitTime"),
    JOB_ID((short)3, "jobId"),
    APP_ID((short)4, "appId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STAGES
          return STAGES;
        case 2: // SUBMIT_TIME
          return SUBMIT_TIME;
        case 3: // JOB_ID
          return JOB_ID;
        case 4: // APP_ID
          return APP_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUBMITTIME_ISSET_ID = 0;
  private static final int __JOBID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STAGES, new org.apache.thrift.meta_data.FieldMetaData("stages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StageInfo.class))));
    tmpMap.put(_Fields.SUBMIT_TIME, new org.apache.thrift.meta_data.FieldMetaData("submitTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("jobId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StageList.class, metaDataMap);
  }

  public StageList() {
  }

  public StageList(
    List<StageInfo> stages,
    long submitTime,
    int jobId,
    String appId)
  {
    this();
    this.stages = stages;
    this.submitTime = submitTime;
    setSubmitTimeIsSet(true);
    this.jobId = jobId;
    setJobIdIsSet(true);
    this.appId = appId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StageList(StageList other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStages()) {
      List<StageInfo> __this__stages = new ArrayList<StageInfo>(other.stages.size());
      for (StageInfo other_element : other.stages) {
        __this__stages.add(new StageInfo(other_element));
      }
      this.stages = __this__stages;
    }
    this.submitTime = other.submitTime;
    this.jobId = other.jobId;
    if (other.isSetAppId()) {
      this.appId = other.appId;
    }
  }

  public StageList deepCopy() {
    return new StageList(this);
  }

  @Override
  public void clear() {
    this.stages = null;
    setSubmitTimeIsSet(false);
    this.submitTime = 0;
    setJobIdIsSet(false);
    this.jobId = 0;
    this.appId = null;
  }

  public int getStagesSize() {
    return (this.stages == null) ? 0 : this.stages.size();
  }

  public java.util.Iterator<StageInfo> getStagesIterator() {
    return (this.stages == null) ? null : this.stages.iterator();
  }

  public void addToStages(StageInfo elem) {
    if (this.stages == null) {
      this.stages = new ArrayList<StageInfo>();
    }
    this.stages.add(elem);
  }

  public List<StageInfo> getStages() {
    return this.stages;
  }

  public StageList setStages(List<StageInfo> stages) {
    this.stages = stages;
    return this;
  }

  public void unsetStages() {
    this.stages = null;
  }

  /** Returns true if field stages is set (has been assigned a value) and false otherwise */
  public boolean isSetStages() {
    return this.stages != null;
  }

  public void setStagesIsSet(boolean value) {
    if (!value) {
      this.stages = null;
    }
  }

  public long getSubmitTime() {
    return this.submitTime;
  }

  public StageList setSubmitTime(long submitTime) {
    this.submitTime = submitTime;
    setSubmitTimeIsSet(true);
    return this;
  }

  public void unsetSubmitTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBMITTIME_ISSET_ID);
  }

  /** Returns true if field submitTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSubmitTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBMITTIME_ISSET_ID);
  }

  public void setSubmitTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBMITTIME_ISSET_ID, value);
  }

  public int getJobId() {
    return this.jobId;
  }

  public StageList setJobId(int jobId) {
    this.jobId = jobId;
    setJobIdIsSet(true);
    return this;
  }

  public void unsetJobId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JOBID_ISSET_ID);
  }

  /** Returns true if field jobId is set (has been assigned a value) and false otherwise */
  public boolean isSetJobId() {
    return EncodingUtils.testBit(__isset_bitfield, __JOBID_ISSET_ID);
  }

  public void setJobIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JOBID_ISSET_ID, value);
  }

  public String getAppId() {
    return this.appId;
  }

  public StageList setAppId(String appId) {
    this.appId = appId;
    return this;
  }

  public void unsetAppId() {
    this.appId = null;
  }

  /** Returns true if field appId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return this.appId != null;
  }

  public void setAppIdIsSet(boolean value) {
    if (!value) {
      this.appId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STAGES:
      if (value == null) {
        unsetStages();
      } else {
        setStages((List<StageInfo>)value);
      }
      break;

    case SUBMIT_TIME:
      if (value == null) {
        unsetSubmitTime();
      } else {
        setSubmitTime((Long)value);
      }
      break;

    case JOB_ID:
      if (value == null) {
        unsetJobId();
      } else {
        setJobId((Integer)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STAGES:
      return getStages();

    case SUBMIT_TIME:
      return Long.valueOf(getSubmitTime());

    case JOB_ID:
      return Integer.valueOf(getJobId());

    case APP_ID:
      return getAppId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STAGES:
      return isSetStages();
    case SUBMIT_TIME:
      return isSetSubmitTime();
    case JOB_ID:
      return isSetJobId();
    case APP_ID:
      return isSetAppId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StageList)
      return this.equals((StageList)that);
    return false;
  }

  public boolean equals(StageList that) {
    if (that == null)
      return false;

    boolean this_present_stages = true && this.isSetStages();
    boolean that_present_stages = true && that.isSetStages();
    if (this_present_stages || that_present_stages) {
      if (!(this_present_stages && that_present_stages))
        return false;
      if (!this.stages.equals(that.stages))
        return false;
    }

    boolean this_present_submitTime = true;
    boolean that_present_submitTime = true;
    if (this_present_submitTime || that_present_submitTime) {
      if (!(this_present_submitTime && that_present_submitTime))
        return false;
      if (this.submitTime != that.submitTime)
        return false;
    }

    boolean this_present_jobId = true;
    boolean that_present_jobId = true;
    if (this_present_jobId || that_present_jobId) {
      if (!(this_present_jobId && that_present_jobId))
        return false;
      if (this.jobId != that.jobId)
        return false;
    }

    boolean this_present_appId = true && this.isSetAppId();
    boolean that_present_appId = true && that.isSetAppId();
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (!this.appId.equals(that.appId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_stages = true && (isSetStages());
    list.add(present_stages);
    if (present_stages)
      list.add(stages);

    boolean present_submitTime = true;
    list.add(present_submitTime);
    if (present_submitTime)
      list.add(submitTime);

    boolean present_jobId = true;
    list.add(present_jobId);
    if (present_jobId)
      list.add(jobId);

    boolean present_appId = true && (isSetAppId());
    list.add(present_appId);
    if (present_appId)
      list.add(appId);

    return list.hashCode();
  }

  @Override
  public int compareTo(StageList other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStages()).compareTo(other.isSetStages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stages, other.stages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubmitTime()).compareTo(other.isSetSubmitTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubmitTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.submitTime, other.submitTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobId()).compareTo(other.isSetJobId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobId, other.jobId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StageList(");
    boolean first = true;

    sb.append("stages:");
    if (this.stages == null) {
      sb.append("null");
    } else {
      sb.append(this.stages);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("submitTime:");
    sb.append(this.submitTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobId:");
    sb.append(this.jobId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("appId:");
    if (this.appId == null) {
      sb.append("null");
    } else {
      sb.append(this.appId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StageListStandardSchemeFactory implements SchemeFactory {
    public StageListStandardScheme getScheme() {
      return new StageListStandardScheme();
    }
  }

  private static class StageListStandardScheme extends StandardScheme<StageList> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StageList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.stages = new ArrayList<StageInfo>(_list8.size);
                StageInfo _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new StageInfo();
                  _elem9.read(iprot);
                  struct.stages.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setStagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUBMIT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.submitTime = iprot.readI64();
              struct.setSubmitTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // JOB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jobId = iprot.readI32();
              struct.setJobIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appId = iprot.readString();
              struct.setAppIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StageList struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.stages != null) {
        oprot.writeFieldBegin(STAGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.stages.size()));
          for (StageInfo _iter11 : struct.stages)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SUBMIT_TIME_FIELD_DESC);
      oprot.writeI64(struct.submitTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
      oprot.writeI32(struct.jobId);
      oprot.writeFieldEnd();
      if (struct.appId != null) {
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeString(struct.appId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StageListTupleSchemeFactory implements SchemeFactory {
    public StageListTupleScheme getScheme() {
      return new StageListTupleScheme();
    }
  }

  private static class StageListTupleScheme extends TupleScheme<StageList> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StageList struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStages()) {
        optionals.set(0);
      }
      if (struct.isSetSubmitTime()) {
        optionals.set(1);
      }
      if (struct.isSetJobId()) {
        optionals.set(2);
      }
      if (struct.isSetAppId()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetStages()) {
        {
          oprot.writeI32(struct.stages.size());
          for (StageInfo _iter12 : struct.stages)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.isSetSubmitTime()) {
        oprot.writeI64(struct.submitTime);
      }
      if (struct.isSetJobId()) {
        oprot.writeI32(struct.jobId);
      }
      if (struct.isSetAppId()) {
        oprot.writeString(struct.appId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StageList struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.stages = new ArrayList<StageInfo>(_list13.size);
          StageInfo _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new StageInfo();
            _elem14.read(iprot);
            struct.stages.add(_elem14);
          }
        }
        struct.setStagesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.submitTime = iprot.readI64();
        struct.setSubmitTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.jobId = iprot.readI32();
        struct.setJobIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.appId = iprot.readString();
        struct.setAppIdIsSet(true);
      }
    }
  }

}

